// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"orm_test/ent/testdata"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TestData is the model entity for the TestData schema.
type TestData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testdata.FieldID:
			values[i] = new(sql.NullInt64)
		case testdata.FieldText:
			values[i] = new(sql.NullString)
		case testdata.FieldCreatedAt, testdata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TestData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestData fields.
func (td *TestData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int(value.Int64)
		case testdata.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				td.Text = value.String
			}
		case testdata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Time
			}
		case testdata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				td.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TestData.
// Note that you need to call TestData.Unwrap() before calling this method if this TestData
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TestData) Update() *TestDataUpdateOne {
	return (&TestDataClient{config: td.config}).UpdateOne(td)
}

// Unwrap unwraps the TestData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TestData) Unwrap() *TestData {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestData is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TestData) String() string {
	var builder strings.Builder
	builder.WriteString("TestData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("text=")
	builder.WriteString(td.Text)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(td.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(td.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TestDataSlice is a parsable slice of TestData.
type TestDataSlice []*TestData

func (td TestDataSlice) config(cfg config) {
	for _i := range td {
		td[_i].config = cfg
	}
}
